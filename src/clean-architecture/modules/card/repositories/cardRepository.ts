import { Card } from "../domain/entities/card";
import { User } from "../../user/domain/entities/User";

export interface PaginatedResult<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

export interface CardWithUsers {
  card: Card;
  creator: User | null;
  recipient: User | null;
}

export interface PaginatedCardWithUsers {
  data: CardWithUsers[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

export interface CardRepository {
  /**
   * Find a card by ID
   */
  findById(id: string): Promise<Card | null>;
  
  /**
   * Find all cards with optional filtering and pagination
   * Includes creator and recipient user details
   */
  findAllWithUsers(filters?: {
    userId?: string;
    createdFor?: string;
    teamId?: string;
    fromDate?: Date;
    toDate?: Date;
    page?: number;
    limit?: number;
    title?: string;
    searchText?: string;
  }): Promise<PaginatedCardWithUsers>;
  
  /**
   * Find all cards with optional filtering and pagination
   */
  findAll(filters?: {
    userId?: string;
    createdFor?: string;
    teamId?: string;
    fromDate?: Date;
    toDate?: Date;
    page?: number;
    limit?: number;
  }): Promise<PaginatedResult<Card>>;
  
  /**
   * Find cards created by a specific user
   */
  findByUser(userId: string): Promise<Card[]>;
  
  /**
   * Find cards created for a specific user
   */
  findByCreatedFor(userId: string): Promise<Card[]>;
  
  /**
   * Find the latest N cards
   * Includes creator and recipient user details
   */
  findLatestWithUsers(limit: number, teamId?: string): Promise<CardWithUsers[]>;
  
  /**
   * Find the latest N cards
   */
  findLatest(limit: number, teamId?: string): Promise<Card[]>;
  
  /**
   * Save a card (create or update)
   * For new cards, ID will be auto-generated by the database
   */
  save(card: Card): Promise<Card>;
  
  /**
   * Delete a card by ID
   */
  delete(id: string): Promise<boolean>;
} 