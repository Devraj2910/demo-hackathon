export interface CardProps {
  id?: string;  // Make ID optional since it will be auto-generated by the database
  title: string;
  content: string;
  userId: string;
  createdFor: string;
  createdAt: Date;
  updatedAt: Date;
  teamId?: string | null;
}

export class Card {
  private props: CardProps;

  private constructor(props: CardProps) {
    this.props = {
      ...props
    };
  }

  public static create(props: CardProps): Card {
    return new Card(props);
  }

  // Getters
  get id(): string | undefined { return this.props.id; }
  get title(): string { return this.props.title; }
  get content(): string { return this.props.content; }
  get userId(): string { return this.props.userId; }
  get createdFor(): string { return this.props.createdFor; }
  get createdAt(): Date { return this.props.createdAt; }
  get updatedAt(): Date { return this.props.updatedAt; }
  get teamId(): string | null | undefined { return this.props.teamId; }

  // Setters
  set id(id: string) {
    this.props.id = id;
  }

  set title(title: string) {
    this.props.title = title;
  }

  set content(content: string) {
    this.props.content = content;
  }

  set updatedAt(date: Date) {
    this.props.updatedAt = date;
  }

  set teamId(teamId: string | null) {
    this.props.teamId = teamId;
  }

  // Business methods
  updateContent(content: string): void {
    this.props.content = content;
    this.props.updatedAt = new Date();
  }

  updateTitle(title: string): void {
    this.props.title = title;
    this.props.updatedAt = new Date();
  }

  // Validation
  validate(): boolean {
    if (!this.props.title || this.props.title.trim() === '') {
      return false;
    }
    
    if (!this.props.userId) {
      return false;
    }
    
    if (!this.props.createdFor) {
      return false;
    }
    
    return true;
  }
} 