import { Card } from "../../../domain/entities/card";
import { CardValidationError } from "../../../domain/errors/cardErrors";
import { CardRepository } from "../../../repositories/cardRepository";
import { AddCardRequestDto } from "./addCardRequestDto";
import { AddCardResponseDto } from "./addCardResponseDto";

export class AddCard {
  constructor(private cardRepository: CardRepository) {}

  async execute(request: AddCardRequestDto): Promise<AddCardResponseDto> {
    const { title, content, userId, createdFor } = request;

    // Create card entity (without ID - will be generated by database)
    const now = new Date();
    const card = Card.create({
      title,
      content,
      userId,
      createdFor,
      createdAt: now,
      updatedAt: now
    });

    // Validate card
    if (!card.validate()) {
      throw new CardValidationError('Invalid card data');
    }

    // Save card to database (ID will be assigned by database)
    const savedCard = await this.cardRepository.save(card);

    // Return response
    return {
      id: savedCard.id as string,
      title: savedCard.title,
      content: savedCard.content,
      userId: savedCard.userId,
      createdFor: savedCard.createdFor,
      createdAt: savedCard.createdAt.toISOString(),
      updatedAt: savedCard.updatedAt.toISOString()
    };
  }
} 